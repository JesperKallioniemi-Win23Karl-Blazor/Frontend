@* @page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager


<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {

    private string errorMessage = "";


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
   
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
 *@

@* @page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>


<div id="signin">
    <div class="container">
        <h1>Welcome Back</h1>
        <p>Don't have an account yet? <a href="/signup">Sign up here</a></p>


        <EditForm Model="@signInModel" method="post" OnValidSubmit="HandleLogin" FormName="loginForm" class="content">
            <DataAnnotationsValidator />

            <div id="form-email">
                <label for="email">Email</label>
                <InputText @bind-Value="signInModel.Email" id="email" class="form-control" autocomplete="username" aria-required="true" />
                <ValidationMessage For="() => signInModel.Email" class="text-danger" />
            </div>

            <div id="form-password">
                <label for="password">Password</label>
                <InputText type="password" @bind-Value="signInModel.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" />
                <ValidationMessage For="() => signInModel.Password" class="text-danger" />
            </div>

            <div id="form-remember">
                <label class="form-check-label">
                    <InputCheckbox @bind-Value="signInModel.RememberMe" class="form-check-input" /> Remember me
                </label>
            </div>

            <button type="submit" class="btn btn-primary">Log in</button>
        </EditForm>

        <div class="text-center mt-3">
            <p>
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </p>
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
            </p>
            <p>
                <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </p>
        </div>
    </div>
</div>

@code {
    private SignInModel signInModel = new SignInModel();
    private string errorMessage = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(signInModel.Email, signInModel.Password, signInModel.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public class SignInModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [Display(Name = "Email", Prompt = "Enter your email address", Order = 0)]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password", Order = 1)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]

        public bool RememberMe { get; set; }
    }
} *@

@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<PageTitle>Log in</PageTitle>

<div id="signin">
    <div class="container">
        <h1>Welcome Back</h1>
        <p>Don't have an account yet? <a href="/signup">Sign up here</a></p>

        <EditForm Model="@signInModel" method="post" OnValidSubmit="HandleLogin" FormName="loginForm" class="content">
            <DataAnnotationsValidator />

            <ValidationSummary class="text-danger" role="alert" />

            <div id="form-email">
                <label for="email">Email</label>
                <InputText @bind-Value="signInModel.Email" id="email" class="form-control" autocomplete="username" aria-required="true" />
                <ValidationMessage For="() => signInModel.Email" class="text-danger" />
            </div>

            <div id="form-password">
                <label for="password">Password</label>
                <InputText type="password" @bind-Value="signInModel.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" />
                <ValidationMessage For="() => signInModel.Password" class="text-danger" />
            </div>

            <div id="form-remember">
                <label class="form-check-label">
                    <InputCheckbox @bind-Value="signInModel.RememberMe" class="form-check-input" /> Remember me
                </label>
            </div>

            <button type="submit" class="btn btn-primary">Log in</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>

        <div class="text-center mt-3">
            <p>
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </p>
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
            </p>
            <p>
                <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </p>
        </div>
    </div>
</div>

@code {
    private SignInModel signInModel = new SignInModel();
    private string errorMessage = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(signInModel.Email, signInModel.Password, signInModel.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            errorMessage = "Your account is locked out. Please try again later.";
        }
        else
        {
            Logger.LogWarning("Invalid login attempt.");
            errorMessage = "Invalid login attempt. Please check your credentials and try again.";
        }
    }

    public class SignInModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [Display(Name = "Email", Prompt = "Enter your email address", Order = 0)]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password", Order = 1)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

