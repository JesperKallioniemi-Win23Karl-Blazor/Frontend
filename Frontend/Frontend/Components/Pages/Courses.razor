

<section id="courses">
    <div class="container">
        <div class="items">
            @if (courses == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    <div class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>
                        }

                        <button id="bookmark-button" class="btn-circle bookmark" data-bs-toggle="tooltip" data-bs-title="Save Course"><i class="fa-regular fa-bookmark"></i></button>

                        <img src="/images/courses/@course.ImageUri" alt="@course.Title">

                        <div class="content" onclick="location.href='/courses/@course.Id'">
                            <h5>@course.Title</h5>
                            <p class="author">By @string.Join(", ", course.Authors!.Select(a => a.Name))</p>
                            @if (course.Prices != null)
                            {
                                <div class="pricing">
                                    @if (course.Prices.Discount > 0)
                                    {
                                        <p class="discount">
                                            @course.Prices.Currency @course.Prices.Discount
                                            <span class="discount-enabled">@course.Prices.Currency @course.Prices.Price</span>
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="original">@course.Prices.Currency @course.Prices.Price</p>
                                    }
                                </div>
                            }
                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i>@course.Hours hours
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i>@course.LikesInProcent (@course.Likes)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>


@code {

    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQlQuery
            {
                Query = @"
                query {
                    getCourses {
                id
                imageUri
                isBestseller
                title
                authors {
                    name
                }
                prices {
                    currency
                    price
                    discount
                }
                starRating
                reviews
                likesInProcent
                likes
                hours
                    }
                }
            "
            };

            var response = await Http.PostJsonAsync<GraphQLQuery>("http://localhost:7251/api/graphql", query);

            if(response.IsSuccessStatusCode)
            {
                var result = await respons.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
                courses = result?.Data.GetProperty("getAllCourses").EnumerateArray().Select(course => new CourseCardModel
                {
                    Id = course.GetProperty("id").GetString()!,
                    IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                    ImageUri = course.GetProperty("imageUri").GetString(),
                    Title = course.GetProperty("title").GetString(),
                    Authors = course.GetProperty("authors").EnumerateArray()
                                .Select(author => new Author
                                {
                                    Name = author.GetProperty("name").GetString()!,
                                }).ToList(),
                    Prices = new Prices
                    {
                        Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
                        Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                        Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                    },
                    StarRating = course.GetProperty("starRating").GetDecimal(),
                    Reviews = course.GetProperty("reviews").GetString(),
                    LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                    Likes = course.GetProperty("likes").GetString(),
                    Hours = course.GetProperty("hours").GetString()
                }).ToList();
            }

    }

}

