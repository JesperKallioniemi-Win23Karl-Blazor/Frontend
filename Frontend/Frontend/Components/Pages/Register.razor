@page "/SignUp"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Frontend.Data

@inject UserManager<ApplicationUser> UserManager

@inject SignInManager<ApplicationUser> SignInManager

@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager


<PageTitle>Register</PageTitle>


<div id="signup">
    <div class="container">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="signup-editForm">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-signup">

                 <div  id="form-firstname">
                     <InputText @bind-Value="Input.FirstName" class="form-control input-group" autocomplete="givenname" aria-required="true" placeholder="First name" />  
                     <label for="first-name">First Name</label>
                     <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                 </div>

                 <div  id="form-lastname">
                        <InputText @bind-Value="Input.LastName" class="form-control input-group" autocomplete="familyname" aria-required="true" placeholder="Last name" />
                        <label for="last-name">Last Name</label>
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                 </div>

                 <div  id="form-email">
                     <InputText @bind-Value="Input.Email" class="form-control input-group " autocomplete="username" aria-required="true" placeholder="name@example.com" />
                     <label for="email">Email</label>
                     <ValidationMessage For="() => Input.Email" class="text-danger" />
                 </div>
                 <div  id="form-password">
                     <InputText type="password" @bind-Value="Input.Password" class="form-control input-group" autocomplete="new-password" aria-required="true" placeholder="password" />
                     <label for="password">Password</label>
                     <ValidationMessage For="() => Input.Password" class="text-danger" />
                 </div>
                 <div  id="form-confirm">
                     <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control input-group" autocomplete="new-password" aria-required="true" placeholder="password" />
                     <label for="confirm-password">Confirm Password</label>
                     <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                 </div>
            </div>
            <button type="submit" class="form-submit btn btn-lg btn-primary">Register</button>

        </EditForm>
    </div>

</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email, };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            return;
        }

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/Account/ConfirmEmail?email={user.Email}");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }





    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email", Prompt = "Enter your mail")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Invalid Email or Password")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your Password")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Invalid Email or Password")]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";


    }
}


